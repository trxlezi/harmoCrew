{"ast":null,"code":"var _jsxFileName = \"/home/d-_-b/harmoCrew/frontend/src/pages/LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../context/AuthContext\";\nimport LoginForm from \"../components/LoginForm\";\nimport \"../styles/global.css\";\nimport \"../styles/colors.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [senha, setSenha] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const {\n    login\n  } = useAuth();\n  const navigate = useNavigate();\n  const handleLogin = async () => {\n    setErrorMessage(\"\");\n    try {\n      const res = await fetch(\"http://localhost:5000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          senha\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        login(data.token, data.user);\n        navigate(\"/home\");\n      } else {\n        setErrorMessage(data.message || \"Credenciais inválidas!\");\n      }\n    } catch (error) {\n      setErrorMessage(\"Erro ao tentar fazer login. Tente novamente mais tarde.\");\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(LoginForm, {\n    email: email,\n    senha: senha,\n    setEmail: setEmail,\n    setSenha: setSenha,\n    onSubmit: handleLogin,\n    errorMessage: errorMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"jrbm08oWyhNRlpJlogo+jDm19KQ=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useNavigate","useAuth","LoginForm","jsxDEV","_jsxDEV","LoginPage","_s","email","setEmail","senha","setSenha","errorMessage","setErrorMessage","login","navigate","handleLogin","res","fetch","method","headers","body","JSON","stringify","data","json","ok","token","user","message","error","console","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/d-_-b/harmoCrew/frontend/src/pages/LoginPage.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../context/AuthContext\";\nimport LoginForm from \"../components/LoginForm\";\nimport \"../styles/global.css\";\nimport \"../styles/colors.css\";\n\nconst LoginPage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [senha, setSenha] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const { login } = useAuth();\n  const navigate = useNavigate();\n\n  const handleLogin = async () => {\n    setErrorMessage(\"\"); \n    try {\n      const res = await fetch(\"http://localhost:5000/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email, senha }),\n      });\n\n      const data = await res.json();\n      if (res.ok) {\n        login(data.token, data.user);\n        navigate(\"/home\");\n      } else {\n        setErrorMessage(data.message || \"Credenciais inválidas!\");\n      }\n    } catch (error) {\n      setErrorMessage(\"Erro ao tentar fazer login. Tente novamente mais tarde.\");\n      console.error(error);\n    }\n  };\n\n  return (\n    <LoginForm\n      email={email}\n      senha={senha}\n      setEmail={setEmail}\n      setSenha={setSenha}\n      onSubmit={handleLogin}\n      errorMessage={errorMessage}\n    />\n  );\n};\n\nexport default LoginPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAO,sBAAsB;AAC7B,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM;IAAEc;EAAM,CAAC,GAAGZ,OAAO,CAAC,CAAC;EAC3B,MAAMa,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAE9B,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9BH,eAAe,CAAC,EAAE,CAAC;IACnB,IAAI;MACF,MAAMI,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QACrDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEf,KAAK;UAAEE;QAAM,CAAC;MACvC,CAAC,CAAC;MAEF,MAAMc,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;MAC7B,IAAIR,GAAG,CAACS,EAAE,EAAE;QACVZ,KAAK,CAACU,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACI,IAAI,CAAC;QAC5Bb,QAAQ,CAAC,OAAO,CAAC;MACnB,CAAC,MAAM;QACLF,eAAe,CAACW,IAAI,CAACK,OAAO,IAAI,wBAAwB,CAAC;MAC3D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdjB,eAAe,CAAC,yDAAyD,CAAC;MAC1EkB,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACEzB,OAAA,CAACF,SAAS;IACRK,KAAK,EAAEA,KAAM;IACbE,KAAK,EAAEA,KAAM;IACbD,QAAQ,EAAEA,QAAS;IACnBE,QAAQ,EAAEA,QAAS;IACnBqB,QAAQ,EAAEhB,WAAY;IACtBJ,YAAY,EAAEA;EAAa;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEN,CAAC;AAAC7B,EAAA,CAvCID,SAAS;EAAA,QAIKJ,OAAO,EACRD,WAAW;AAAA;AAAAoC,EAAA,GALxB/B,SAAS;AAyCf,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}